{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/legacy/ion-virtual-scroll.entry.js"],"names":["__webpack_require__","r","__webpack_exports__","d","VirtualScroll","tslib__WEBPACK_IMPORTED_MODULE_0__","_chunk_09ec7fc0_js__WEBPACK_IMPORTED_MODULE_1__","CELL_TYPE_ITEM","CELL_TYPE_HEADER","CELL_TYPE_FOOTER","NODE_CHANGE_NONE","NODE_CHANGE_POSITION","NODE_CHANGE_CELL","MIN_READS","updateVDom","dom","heightIndex","cells","range","_i","dom_1","length","node","change","toMutate","end","offset","_loop_1","i","cell","find","n","top","push","pool","filter","_loop_2","type","index","visible","_a","toMutate_1","forEach","doRender","el","nodeRender","updateCellHeight","child","children","Array","from","tagName","childrenNu","newChild","createNode","classList","add","appendChild","style","transform","remove","reads","template","getTemplate","ownerDocument","importNode","content","querySelector","getViewport","scrollTop","vierportHeight","margin","Math","max","bottom","getRange","viewport","buffer","topPos","bottomPos","min","getShouldUpdate","dirtyIndex","currentRange","findCellIndex","findIndex","c","inplaceUpdate","dst","src","calcCells","items","itemHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","len","item","value","height","calcHeightIndex","buf","acum","resizeBuffer","Uint32Array","newBuf","set","subarray","positionForIndex","hostRef","_this","this","Object","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","prototype","itemsChanged","componentDidLoad","contentEl","_b","label","closest","componentOnReady","console","error","sent","getScrollElement","scrollEl","updateState","componentDidUpdate","componentDidUnload","undefined","onResize","positionForItem","Promise","resolve","getHeightIndex","checkRange","cellIndex","scheduleUpdate","checkEnd","timerUpdate","clearTimeout","readVS","bind","writeVS","topOffset","offsetTop","parentElement","offsetHeight","shouldUpdate","domRender","renderItem","forceUpdate","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","then","setTimeout","shouldEnable","enableScrollEvents","Infinity","shouldListen","rmEvent","addEventListener","removeEventListener","renderVirtualNode","renderHeader","renderFooter","hostData","__stencil_render","VirtualProxy","map","defineProperty","get","enumerable","configurable","render","utils","vattrs","classes","class","assign"],"mappings":"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","file":"js/chunk-2d0c7743.2f64c33d.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { r as registerInstance, f as readTask, w as writeTask, h, e as getElement, H as Host } from './chunk-09ec7fc0.js';\nimport './chunk-1074393c.js';\nvar CELL_TYPE_ITEM = 'item';\nvar CELL_TYPE_HEADER = 'header';\nvar CELL_TYPE_FOOTER = 'footer';\nvar NODE_CHANGE_NONE = 0;\nvar NODE_CHANGE_POSITION = 1;\nvar NODE_CHANGE_CELL = 2;\nvar MIN_READS = 2;\nvar updateVDom = function (dom, heightIndex, cells, range) {\n    // reset dom\n    for (var _i = 0, dom_1 = dom; _i < dom_1.length; _i++) {\n        var node = dom_1[_i];\n        node.change = NODE_CHANGE_NONE;\n        node.d = true;\n    }\n    // try to match into exisiting dom\n    var toMutate = [];\n    var end = range.offset + range.length;\n    var _loop_1 = function (i) {\n        var cell = cells[i];\n        var node = dom.find(function (n) { return n.d && n.cell === cell; });\n        if (node) {\n            var top = heightIndex[i];\n            if (top !== node.top) {\n                node.top = top;\n                node.change = NODE_CHANGE_POSITION;\n            }\n            node.d = false;\n        }\n        else {\n            toMutate.push(cell);\n        }\n    };\n    for (var i = range.offset; i < end; i++) {\n        _loop_1(i);\n    }\n    // needs to append\n    var pool = dom.filter(function (n) { return n.d; });\n    var _loop_2 = function (cell) {\n        var node = pool.find(function (n) { return n.d && n.cell.type === cell.type; });\n        var index = cell.i;\n        if (node) {\n            node.d = false;\n            node.change = NODE_CHANGE_CELL;\n            node.cell = cell;\n            node.top = heightIndex[index];\n        }\n        else {\n            dom.push({\n                d: false,\n                cell: cell,\n                visible: true,\n                change: NODE_CHANGE_CELL,\n                top: heightIndex[index],\n            });\n        }\n    };\n    for (var _a = 0, toMutate_1 = toMutate; _a < toMutate_1.length; _a++) {\n        var cell = toMutate_1[_a];\n        _loop_2(cell);\n    }\n    dom\n        .filter(function (n) { return n.d && n.top !== -9999; })\n        .forEach(function (n) {\n        n.change = NODE_CHANGE_POSITION;\n        n.top = -9999;\n    });\n};\nvar doRender = function (el, nodeRender, dom, updateCellHeight) {\n    var children = Array.from(el.children).filter(function (n) { return n.tagName !== 'TEMPLATE'; });\n    var childrenNu = children.length;\n    var child;\n    for (var i = 0; i < dom.length; i++) {\n        var node = dom[i];\n        var cell = node.cell;\n        // the cell change, the content must be updated\n        if (node.change === NODE_CHANGE_CELL) {\n            if (i < childrenNu) {\n                child = children[i];\n                nodeRender(child, cell, i);\n            }\n            else {\n                var newChild = createNode(el, cell.type);\n                child = nodeRender(newChild, cell, i) || newChild;\n                child.classList.add('virtual-item');\n                el.appendChild(child);\n            }\n            child['$ionCell'] = cell;\n        }\n        else {\n            child = children[i];\n        }\n        // only update position when it changes\n        if (node.change !== NODE_CHANGE_NONE) {\n            child.style.transform = \"translate3d(0,\" + node.top + \"px,0)\";\n        }\n        // update visibility\n        var visible = cell.visible;\n        if (node.visible !== visible) {\n            if (visible) {\n                child.classList.remove('virtual-loading');\n            }\n            else {\n                child.classList.add('virtual-loading');\n            }\n            node.visible = visible;\n        }\n        // dynamic height\n        if (cell.reads > 0) {\n            updateCellHeight(cell, child);\n            cell.reads--;\n        }\n    }\n};\nvar createNode = function (el, type) {\n    var template = getTemplate(el, type);\n    if (template && el.ownerDocument) {\n        return el.ownerDocument.importNode(template.content, true).children[0];\n    }\n    return null;\n};\nvar getTemplate = function (el, type) {\n    switch (type) {\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n    }\n};\nvar getViewport = function (scrollTop, vierportHeight, margin) {\n    return {\n        top: Math.max(scrollTop - margin, 0),\n        bottom: scrollTop + vierportHeight + margin\n    };\n};\nvar getRange = function (heightIndex, viewport, buffer) {\n    var topPos = viewport.top;\n    var bottomPos = viewport.bottom;\n    // find top index\n    var i = 0;\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] > topPos) {\n            break;\n        }\n    }\n    var offset = Math.max(i - buffer - 1, 0);\n    // find bottom index\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] >= bottomPos) {\n            break;\n        }\n    }\n    var end = Math.min(i + buffer, heightIndex.length);\n    var length = end - offset;\n    return { offset: offset, length: length };\n};\nvar getShouldUpdate = function (dirtyIndex, currentRange, range) {\n    var end = range.offset + range.length;\n    return (dirtyIndex <= end ||\n        currentRange.offset !== range.offset ||\n        currentRange.length !== range.length);\n};\nvar findCellIndex = function (cells, index) {\n    var max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n    if (index === 0) {\n        return 0;\n    }\n    else if (index === max + 1) {\n        return cells.length;\n    }\n    else {\n        return cells.findIndex(function (c) { return c.index === index; });\n    }\n};\nvar inplaceUpdate = function (dst, src, offset) {\n    if (offset === 0 && src.length >= dst.length) {\n        return src;\n    }\n    for (var i = 0; i < src.length; i++) {\n        dst[i + offset] = src[i];\n    }\n    return dst;\n};\nvar calcCells = function (items, itemHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) {\n    var cells = [];\n    var end = len + offset;\n    for (var i = offset; i < end; i++) {\n        var item = items[i];\n        if (headerFn) {\n            var value = headerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_HEADER,\n                    value: value,\n                    index: i,\n                    height: approxHeaderHeight,\n                    reads: MIN_READS,\n                    visible: false,\n                });\n            }\n        }\n        cells.push({\n            i: j++,\n            type: CELL_TYPE_ITEM,\n            value: item,\n            index: i,\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n            reads: itemHeight ? 0 : MIN_READS,\n            visible: !!itemHeight,\n        });\n        if (footerFn) {\n            var value = footerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_FOOTER,\n                    value: value,\n                    index: i,\n                    height: approxFooterHeight,\n                    reads: 2,\n                    visible: false,\n                });\n            }\n        }\n    }\n    return cells;\n};\nvar calcHeightIndex = function (buf, cells, index) {\n    var acum = buf[index];\n    for (var i = index; i < buf.length; i++) {\n        buf[i] = acum;\n        acum += cells[i].height;\n    }\n    return acum;\n};\nvar resizeBuffer = function (buf, len) {\n    if (!buf) {\n        return new Uint32Array(len);\n    }\n    if (buf.length === len) {\n        return buf;\n    }\n    else if (len > buf.length) {\n        var newBuf = new Uint32Array(len);\n        newBuf.set(buf);\n        return newBuf;\n    }\n    else {\n        return buf.subarray(0, len);\n    }\n};\nvar positionForIndex = function (index, cells, heightIndex) {\n    var cell = cells.find(function (c) { return c.type === CELL_TYPE_ITEM && c.index === index; });\n    if (cell) {\n        return heightIndex[cell.i];\n    }\n    return -1;\n};\nvar VirtualScroll = /** @class */ (function () {\n    function VirtualScroll(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = function () {\n            _this.updateVirtualScroll();\n        };\n    }\n    VirtualScroll.prototype.itemsChanged = function () {\n        this.calcCells();\n        this.updateVirtualScroll();\n    };\n    VirtualScroll.prototype.componentDidLoad = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var contentEl, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) {\n                            console.error('virtual-scroll must be used inside ion-content');\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, contentEl.componentOnReady()];\n                    case 1:\n                        _b.sent();\n                        this.contentEl = contentEl;\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 2:\n                        _a.scrollEl = _b.sent();\n                        this.calcCells();\n                        this.updateState();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    VirtualScroll.prototype.componentDidUpdate = function () {\n        this.updateState();\n    };\n    VirtualScroll.prototype.componentDidUnload = function () {\n        this.scrollEl = undefined;\n    };\n    VirtualScroll.prototype.onResize = function () {\n        this.updateVirtualScroll();\n    };\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    VirtualScroll.prototype.positionForItem = function (index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    };\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    VirtualScroll.prototype.checkRange = function (offset, len) {\n        if (len === void 0) { len = -1; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var length, cellIndex, cells;\n            return tslib_1.__generator(this, function (_a) {\n                // TODO: kind of hacky how we do in-place updated of the cells\n                // array. this part needs a complete refactor\n                if (!this.items) {\n                    return [2 /*return*/];\n                }\n                length = (len === -1)\n                    ? this.items.length - offset\n                    : len;\n                cellIndex = findCellIndex(this.cells, offset);\n                cells = calcCells(this.items, this.itemHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n                this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n                this.lastItemLen = this.items.length;\n                this.indexDirty = Math.max(offset - 1, 0);\n                this.scheduleUpdate();\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    VirtualScroll.prototype.checkEnd = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.items) {\n                    this.checkRange(this.lastItemLen);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    VirtualScroll.prototype.updateVirtualScroll = function () {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    };\n    VirtualScroll.prototype.readVS = function () {\n        var _a = this, contentEl = _a.contentEl, scrollEl = _a.scrollEl, el = _a.el;\n        var topOffset = 0;\n        var node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    };\n    VirtualScroll.prototype.writeVS = function () {\n        var dirtyIndex = this.indexDirty;\n        // get visible viewport\n        var scrollTop = this.currentScrollTop - this.viewportOffset;\n        var viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        var heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        var range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        var shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            this.el.forceUpdate();\n        }\n    };\n    VirtualScroll.prototype.updateCellHeight = function (cell, node) {\n        var _this = this;\n        var update = function () {\n            if (node['$ionCell'] === cell) {\n                var style = window.getComputedStyle(node);\n                var height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                _this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    };\n    VirtualScroll.prototype.setCellHeight = function (cell, height) {\n        var index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    };\n    VirtualScroll.prototype.scheduleUpdate = function () {\n        var _this = this;\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(function () { return _this.updateVirtualScroll(); }, 100);\n    };\n    VirtualScroll.prototype.updateState = function () {\n        var shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    };\n    VirtualScroll.prototype.calcCells = function () {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    };\n    VirtualScroll.prototype.getHeightIndex = function () {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    };\n    VirtualScroll.prototype.calcHeightIndex = function (index) {\n        if (index === void 0) { index = 0; }\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    };\n    VirtualScroll.prototype.enableScrollEvents = function (shouldListen) {\n        var _this = this;\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        var scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = function () {\n                scrollEl.removeEventListener('scroll', _this.onScroll);\n            };\n        }\n    };\n    VirtualScroll.prototype.renderVirtualNode = function (node) {\n        var _a = node.cell, type = _a.type, value = _a.value, index = _a.index;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    };\n    VirtualScroll.prototype.hostData = function () {\n        return {\n            style: {\n                height: this.totalHeight + \"px\"\n            }\n        };\n    };\n    VirtualScroll.prototype.__stencil_render = function () {\n        var _this = this;\n        if (this.renderItem) {\n            return (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(function (node) { return _this.renderVirtualNode(node); })));\n        }\n        return undefined;\n    };\n    Object.defineProperty(VirtualScroll.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VirtualScroll, \"watchers\", {\n        get: function () {\n            return {\n                \"itemHeight\": [\"itemsChanged\"],\n                \"items\": [\"itemsChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    VirtualScroll.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };\n    Object.defineProperty(VirtualScroll, \"style\", {\n        get: function () { return \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.virtual-loading{opacity:0}.virtual-item{left:0;right:0;top:0;position:absolute;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return VirtualScroll;\n}());\nvar VirtualProxy = function (_a, children, utils) {\n    var dom = _a.dom;\n    return utils.map(children, function (child, i) {\n        var node = dom[i];\n        var vattrs = child.vattrs || {};\n        var classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign({}, child, { vattrs: Object.assign({}, vattrs, { class: classes, style: Object.assign({}, vattrs.style, { transform: \"translate3d(0,\" + node.top + \"px,0)\" }) }) });\n    });\n};\nexport { VirtualScroll as ion_virtual_scroll };\n"],"sourceRoot":""}