{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/legacy/ion-refresher_2-ios.entry.js","webpack:///./node_modules/@ionic/core/dist/esm/legacy/chunk-cae2ca23.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Refresher","RefresherContent","tslib__WEBPACK_IMPORTED_MODULE_0__","_chunk_09ec7fc0_js__WEBPACK_IMPORTED_MODULE_1__","_chunk_1074393c_js__WEBPACK_IMPORTED_MODULE_2__","_chunk_cae2ca23_js__WEBPACK_IMPORTED_MODULE_3__","hostRef","Object","this","appliedStyles","didStart","progress","state","pullMin","pullMax","closeDuration","snapbackDuration","pullFactor","disabled","ionRefresh","ionPull","ionStart","prototype","disabledChanged","gesture","setDisabled","componentDidLoad","contentEl","_a","_b","_this","_c","label","el","getAttribute","console","error","closest","componentOnReady","sent","getScrollElement","scrollEl","e","then","bind","createGesture","gestureName","gesturePriority","direction","threshold","passive","canStart","onStart","onMove","ev","onEnd","componentDidUnload","undefined","destroy","complete","close","cancel","getProgress","Promise","resolve","scrollTop","detail","event","touches","length","Number","isNaN","deltaY","setCss","scrollHostScrollTop","cancelable","preventDefault","emit","beginRefresh","delay","setTimeout","y","duration","overflowVisible","style","transform","transitionDuration","transitionDelay","overflow","hostData","mode","slot","class","defineProperty","get","enumerable","configurable","render","componentWillLoad","pullingIcon","refreshingSpinner","__stencil_render","icon","lazy","pullingText","innerHTML","name","refreshingText","sanitizeDOMString","untrustedString","documentFragment_1","document","createDocumentFragment","workingDiv","createElement","appendChild","blockedTags","forEach","blockedTag","getElementsToRemove","querySelectorAll","elementIndex","element","parentNode","removeChild","childElements","getElementChildren","childIndex","sanitizeElement","documentFragmentChildren","fragmentDiv","getInnerDiv","querySelector","err","nodeType","i","attributes","attribute","attributeName","allowedAttributes","includes","toLowerCase","attributeValue","value","removeAttribute","children","childNodes"],"mappings":"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","file":"js/chunk-bd8f5b76.74b4ffb2.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { r as registerInstance, d as createEvent, w as writeTask, c as getIonMode, e as getElement, h, H as Host } from './chunk-09ec7fc0.js';\nimport { b as config } from './chunk-1074393c.js';\nimport { s as sanitizeDOMString } from './chunk-cae2ca23.js';\nvar Refresher = /** @class */ (function () {\n    function Refresher(hostRef) {\n        registerInstance(this, hostRef);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = 1 /* Inactive */;\n        /**\n         * The minimum distance the user must pull down until the\n         * refresher will go into the `refreshing` state.\n         */\n        this.pullMin = 60;\n        /**\n         * The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state.\n         * Defaults to the result of `pullMin + 60`.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * Time it takes to close the refresher.\n         */\n        this.closeDuration = '280ms';\n        /**\n         * Time it takes the refresher to to snap back to the `refreshing` state.\n         */\n        this.snapbackDuration = '280ms';\n        /**\n         * How much to multiply the pull speed by. To slow the pull animation down,\n         * pass a number less than `1`. To speed up the pull, pass a number greater\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\n         * If a negative value is passed in, the factor will be `1` instead.\n         *\n         * For example: If the value passed is `1.2` and the content is dragged by\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n         * will be `8` pixels, less than the amount the cursor has moved.\n         */\n        this.pullFactor = 1;\n        /**\n         * If `true`, the refresher will be hidden.\n         */\n        this.disabled = false;\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n    }\n    Refresher.prototype.disabledChanged = function () {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.disabled);\n        }\n    };\n    Refresher.prototype.componentDidLoad = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var contentEl, _a, _b;\n            var _this = this;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (this.el.getAttribute('slot') !== 'fixed') {\n                            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n                            return [2 /*return*/];\n                        }\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) return [3 /*break*/, 3];\n                        return [4 /*yield*/, contentEl.componentOnReady()];\n                    case 1:\n                        _c.sent();\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 2:\n                        _a.scrollEl = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        console.error('ion-refresher did not attach, make sure the parent is an ion-content.');\n                        _c.label = 4;\n                    case 4:\n                        _b = this;\n                        return [4 /*yield*/, import('./index-3a9dcfed.js')];\n                    case 5:\n                        _b.gesture = (_c.sent()).createGesture({\n                            el: this.el.closest('ion-content'),\n                            gestureName: 'refresher',\n                            gesturePriority: 10,\n                            direction: 'y',\n                            threshold: 20,\n                            passive: false,\n                            canStart: function () { return _this.canStart(); },\n                            onStart: function () { return _this.onStart(); },\n                            onMove: function (ev) { return _this.onMove(ev); },\n                            onEnd: function () { return _this.onEnd(); },\n                        });\n                        this.disabledChanged();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Refresher.prototype.componentDidUnload = function () {\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    };\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    Refresher.prototype.complete = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.close(32 /* Completing */, '120ms');\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    Refresher.prototype.cancel = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.close(16 /* Cancelling */, '');\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    Refresher.prototype.getProgress = function () {\n        return Promise.resolve(this.progress);\n    };\n    Refresher.prototype.canStart = function () {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    };\n    Refresher.prototype.onStart = function () {\n        this.progress = 0;\n        this.state = 1 /* Inactive */;\n    };\n    Refresher.prototype.onMove = function (detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        var ev = detail.event;\n        if (ev.touches && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\n            return;\n        }\n        var pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\n        var deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            var scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        var pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* Ready */;\n        return;\n    };\n    Refresher.prototype.onEnd = function () {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n    };\n    Refresher.prototype.beginRefresh = function () {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this)\n        });\n    };\n    Refresher.prototype.close = function (state, delay) {\n        var _this = this;\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(function () {\n            _this.state = 1 /* Inactive */;\n            _this.progress = 0;\n            _this.didStart = false;\n            _this.setCss(0, '0ms', false, '');\n        }, 600);\n        // reset set the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n        // TODO: stop gesture\n    };\n    Refresher.prototype.setCss = function (y, duration, overflowVisible, delay) {\n        var _this = this;\n        this.appliedStyles = (y > 0);\n        writeTask(function () {\n            if (_this.scrollEl) {\n                var style = _this.scrollEl.style;\n                style.transform = ((y > 0) ? \"translateY(\" + y + \"px) translateZ(0px)\" : 'translateZ(0px)');\n                style.transitionDuration = duration;\n                style.transitionDelay = delay;\n                style.overflow = (overflowVisible ? 'hidden' : '');\n            }\n        });\n    };\n    Refresher.prototype.hostData = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return {\n            slot: 'fixed',\n            class: (_a = {},\n                _a[mode] = true,\n                // Used internally for styling\n                _a[\"refresher-\" + mode] = true,\n                _a['refresher-active'] = this.state !== 1 /* Inactive */,\n                _a['refresher-pulling'] = this.state === 2 /* Pulling */,\n                _a['refresher-ready'] = this.state === 4 /* Ready */,\n                _a['refresher-refreshing'] = this.state === 8 /* Refreshing */,\n                _a['refresher-cancelling'] = this.state === 16 /* Cancelling */,\n                _a['refresher-completing'] = this.state === 32 /* Completing */,\n                _a)\n        };\n    };\n    Object.defineProperty(Refresher.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Refresher, \"watchers\", {\n        get: function () {\n            return {\n                \"disabled\": [\"disabledChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Refresher.prototype.render = function () { return h(Host, this.hostData()); };\n    Object.defineProperty(Refresher, \"style\", {\n        get: function () { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return Refresher;\n}());\nvar RefresherContent = /** @class */ (function () {\n    function RefresherContent(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    RefresherContent.prototype.componentWillLoad = function () {\n        if (this.pullingIcon === undefined) {\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n        }\n        if (this.refreshingSpinner === undefined) {\n            var mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    };\n    RefresherContent.prototype.hostData = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return {\n            class: (_a = {},\n                _a[mode] = true,\n                _a)\n        };\n    };\n    RefresherContent.prototype.__stencil_render = function () {\n        return [\n            h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\n                h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\n                h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })),\n            h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\n                h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\n                h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))\n        ];\n    };\n    RefresherContent.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };\n    return RefresherContent;\n}());\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\n","/**\n * Does a simple sanitization of all elements\n * in an untrusted string\n */\nvar sanitizeDOMString = function (untrustedString) {\n    try {\n        if (typeof untrustedString !== 'string' || untrustedString === '') {\n            return untrustedString;\n        }\n        /**\n         * Create a document fragment\n         * separate from the main DOM,\n         * create a div to do our work in\n         */\n        var documentFragment_1 = document.createDocumentFragment();\n        var workingDiv = document.createElement('div');\n        documentFragment_1.appendChild(workingDiv);\n        workingDiv.innerHTML = untrustedString;\n        /**\n         * Remove any elements\n         * that are blocked\n         */\n        blockedTags.forEach(function (blockedTag) {\n            var getElementsToRemove = documentFragment_1.querySelectorAll(blockedTag);\n            for (var elementIndex = getElementsToRemove.length - 1; elementIndex >= 0; elementIndex--) {\n                var element = getElementsToRemove[elementIndex];\n                if (element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n                else {\n                    documentFragment_1.removeChild(element);\n                }\n                /**\n                 * We still need to sanitize\n                 * the children of this element\n                 * as they are left behind\n                 */\n                var childElements = getElementChildren(element);\n                /* tslint:disable-next-line */\n                for (var childIndex = 0; childIndex < childElements.length; childIndex++) {\n                    sanitizeElement(childElements[childIndex]);\n                }\n            }\n        });\n        /**\n         * Go through remaining elements and remove\n         * non-allowed attribs\n         */\n        // IE does not support .children on document fragments, only .childNodes\n        var documentFragmentChildren = getElementChildren(documentFragment_1);\n        /* tslint:disable-next-line */\n        for (var childIndex = 0; childIndex < documentFragmentChildren.length; childIndex++) {\n            sanitizeElement(documentFragmentChildren[childIndex]);\n        }\n        // Append document fragment to div\n        var fragmentDiv = document.createElement('div');\n        fragmentDiv.appendChild(documentFragment_1);\n        // First child is always the div we did our work in\n        var getInnerDiv = fragmentDiv.querySelector('div');\n        return (getInnerDiv !== null) ? getInnerDiv.innerHTML : fragmentDiv.innerHTML;\n    }\n    catch (err) {\n        console.error(err);\n        return '';\n    }\n};\n/**\n * Clean up current element based on allowed attributes\n * and then recursively dig down into any child elements to\n * clean those up as well\n */\nvar sanitizeElement = function (element) {\n    // IE uses childNodes, so ignore nodes that are not elements\n    if (element.nodeType && element.nodeType !== 1) {\n        return;\n    }\n    for (var i = element.attributes.length - 1; i >= 0; i--) {\n        var attribute = element.attributes[i];\n        var attributeName = attribute.name;\n        // remove non-allowed attribs\n        if (!allowedAttributes.includes(attributeName.toLowerCase())) {\n            element.removeAttribute(attributeName);\n            continue;\n        }\n        // clean up any allowed attribs\n        // that attempt to do any JS funny-business\n        var attributeValue = attribute.value;\n        /* tslint:disable-next-line */\n        if (attributeValue != null && attributeValue.toLowerCase().includes('javascript:')) {\n            element.removeAttribute(attributeName);\n        }\n    }\n    /**\n     * Sanitize any nested children\n     */\n    var childElements = getElementChildren(element);\n    /* tslint:disable-next-line */\n    for (var i = 0; i < childElements.length; i++) {\n        sanitizeElement(childElements[i]);\n    }\n};\n/**\n * IE doesn't always support .children\n * so we revert to .childNodes instead\n */\nvar getElementChildren = function (element) {\n    return (element.children != null) ? element.children : element.childNodes;\n};\nvar allowedAttributes = ['class', 'id', 'href', 'src', 'name', 'slot'];\nvar blockedTags = ['script', 'style', 'iframe', 'meta', 'link', 'object', 'embed'];\nexport { sanitizeDOMString as s };\n"],"sourceRoot":""}