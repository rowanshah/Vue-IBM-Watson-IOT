{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/legacy/ion-infinite-scroll_2-ios.entry.js","webpack:///./node_modules/@ionic/core/dist/esm/legacy/chunk-cae2ca23.js"],"names":["__webpack_require__","r","__webpack_exports__","d","InfiniteScroll","InfiniteScrollContent","tslib__WEBPACK_IMPORTED_MODULE_0__","_chunk_09ec7fc0_js__WEBPACK_IMPORTED_MODULE_1__","_chunk_1074393c_js__WEBPACK_IMPORTED_MODULE_2__","_chunk_cae2ca23_js__WEBPACK_IMPORTED_MODULE_3__","hostRef","_this","this","Object","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","ionInfinite","emit","prototype","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","componentDidLoad","contentEl","_a","_b","label","closest","componentOnReady","sent","getScrollElement","clientHeight","componentDidUnload","undefined","complete","prev_1","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","defineProperty","get","enumerable","configurable","loadingSpinner","hostData","__stencil_render","name","loadingText","innerHTML","sanitizeDOMString","untrustedString","documentFragment_1","document","createDocumentFragment","workingDiv","createElement","appendChild","blockedTags","forEach","blockedTag","getElementsToRemove","querySelectorAll","elementIndex","length","element","parentNode","removeChild","childElements","getElementChildren","childIndex","sanitizeElement","documentFragmentChildren","fragmentDiv","getInnerDiv","querySelector","err","console","error","nodeType","i","attributes","attribute","attributeName","allowedAttributes","includes","toLowerCase","attributeValue","value","removeAttribute","children","childNodes"],"mappings":"kHAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,wCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,gDAAAG,IAAA,IAAAC,EAAAN,EAAA,QAAAO,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAIAI,EAAA,WACA,SAAAA,EAAAM,GACA,IAAAC,EAAAC,KACQC,OAAAN,EAAA,KAAAM,CAAgBD,KAAAF,GACxBE,KAAAE,MAAA,EACAF,KAAAG,MAAA,EACAH,KAAAI,SAAA,EACAJ,KAAAK,QAAA,EACAL,KAAAM,WAAA,EAUAN,KAAAO,UAAA,MAUAP,KAAAQ,UAAA,EAKAR,KAAAS,SAAA,SACAT,KAAAU,SAAA,WACA,IAAAC,EAAAZ,EAAAY,SACA,IAAAA,IAAAZ,EAAAa,WACA,SAEA,IAAAC,EAAAd,EAAAe,GAAAC,aACA,OAAAF,EAEA,SAEA,IAAAG,EAAAL,EAAAK,UACAC,EAAAN,EAAAM,aACAC,EAAAP,EAAAI,aACAR,EAAA,IAAAR,EAAAI,MAAAe,EAAAnB,EAAAI,MAAAJ,EAAAG,MACAiB,EAAA,WAAApB,EAAAU,SACAQ,EAAAJ,EAAAG,EAAAT,EAAAW,EACAF,EAAAH,EAAAN,EACA,GAAAY,EAAA,GACA,IAAApB,EAAAK,QAIA,OAHAL,EAAAO,WAAA,EACAP,EAAAK,SAAA,EACAL,EAAAqB,YAAAC,OACA,OAIAtB,EAAAK,SAAA,EAEA,UAEAJ,KAAAoB,YAA2BnB,OAAAN,EAAA,KAAAM,CAAWD,KAAA,iBAsKtC,OApKAR,EAAA8B,UAAAC,iBAAA,WACA,IAAAC,EAAAxB,KAAAO,UACAiB,EAAAC,YAAA,SACAzB,KAAAE,MAAA,EACAF,KAAAG,MAAAuB,WAAAF,GAAA,MAGAxB,KAAAE,MAAAwB,WAAAF,GACAxB,KAAAG,MAAA,IAGAX,EAAA8B,UAAAK,gBAAA,WACA,IAAAnB,EAAAR,KAAAQ,SACAA,IACAR,KAAAM,WAAA,EACAN,KAAAK,QAAA,GAEAL,KAAA4B,oBAAApB,IAEAhB,EAAA8B,UAAAO,iBAAA,WACA,OAAenC,EAAA,KAAiBM,UAAA,oBAChC,IAAA8B,EAAAC,EACAhC,EAAAC,KACA,OAAmBN,EAAA,KAAmBM,KAAA,SAAAgC,GACtC,OAAAA,EAAAC,OACA,OAEA,OADAH,EAAA9B,KAAAc,GAAAoB,QAAA,eACAJ,EACA,GAAAA,EAAAK,oBADA,MAEA,OAGA,OAFAH,EAAAI,OACAL,EAAA/B,KACA,GAAA8B,EAAAO,oBACA,OACAN,EAAApB,SAAAqB,EAAAI,OACAJ,EAAAC,MAAA,EACA,OAUA,OATAjC,KAAAuB,mBACAvB,KAAA2B,kBACA,QAAA3B,KAAAS,UAC4BR,OAAAN,EAAA,KAAAM,CAAS,WACrCF,EAAAY,WACAZ,EAAAY,SAAAK,UAAAjB,EAAAY,SAAAM,aAAAlB,EAAAY,SAAA2B,gBAIA,UAKA9C,EAAA8B,UAAAiB,mBAAA,WACAvC,KAAA4B,oBAAA,GACA5B,KAAAW,cAAA6B,GAYAhD,EAAA8B,UAAAmB,SAAA,WACA,OAAe/C,EAAA,KAAiBM,UAAA,oBAChC,IAAAW,EAAA+B,EACA3C,EAAAC,KACA,OAAmBN,EAAA,KAAmBM,KAAA,SAAA+B,GAEtC,OADApB,EAAAX,KAAAW,SACAX,KAAAM,WAAAK,GAGAX,KAAAM,WAAA,EACA,QAAAN,KAAAS,WAoBAT,KAAAK,QAAA,EACAqC,EAAA/B,EAAAM,aAAAN,EAAAK,UAEA2B,sBAAA,WACwB1C,OAAAN,EAAA,KAAAM,CAAQ,WAEhC,IAAAgB,EAAAN,EAAAM,aAEA2B,EAAA3B,EAAAyB,EAEAC,sBAAA,WACgC1C,OAAAN,EAAA,KAAAM,CAAS,WACzCU,EAAAK,UAAA4B,EACA7C,EAAAM,QAAA,WAMA,KA1CA,SA8CAb,EAAA8B,UAAAV,SAAA,WACA,OAAAZ,KAAAQ,WACAR,KAAAK,UACAL,KAAAW,WACAX,KAAAM,WAEAd,EAAA8B,UAAAM,mBAAA,SAAAiB,GACA7C,KAAAW,WACAkC,EACA7C,KAAAW,SAAAmC,iBAAA,SAAA9C,KAAAU,UAGAV,KAAAW,SAAAoC,oBAAA,SAAA/C,KAAAU,YAIAlB,EAAA8B,UAAA0B,OAAA,WACA,IAAAjB,EACAkB,EAAmBhD,OAAAN,EAAA,KAAAM,CAAUD,MAC7BQ,EAAAR,KAAAQ,SACA,OAAgBP,OAAAN,EAAA,KAAhB,CAAkBA,EAAA,KAAI,CAAGuD,OAAAnB,EAAA,GACzBA,EAAAkB,IAAA,EACAlB,EAAA,2BAAA/B,KAAAM,UACAyB,EAAA,4BAAAvB,EACAuB,MAEA9B,OAAAkD,eAAA3D,EAAA8B,UAAA,MACA8B,IAAA,WAA0B,OAAQnD,OAAAN,EAAA,KAAAM,CAAUD,OAC5CqD,YAAA,EACAC,cAAA,IAEArD,OAAAkD,eAAA3D,EAAA,YACA4D,IAAA,WACA,OACA7C,UAAA,qBACAC,SAAA,sBAGA6C,YAAA,EACAC,cAAA,IAEArD,OAAAkD,eAAA3D,EAAA,SACA4D,IAAA,WAA0B,6FAC1BC,YAAA,EACAC,cAAA,IAEA9D,EAtOA,GAwOAC,EAAA,WACA,SAAAA,EAAAK,GACQG,OAAAN,EAAA,KAAAM,CAAgBD,KAAAF,GA4BxB,OA1BAL,EAAA6B,UAAAO,iBAAA,WACA,QAAAW,IAAAxC,KAAAuD,eAAA,CACA,IAAAN,EAAuBhD,OAAAN,EAAA,KAAAM,CAAUD,MACjCA,KAAAuD,eAAkC3D,EAAA,KAAMwD,IAAA,yBAA+BxD,EAAA,KAAMwD,IAAA,kBAAAH,EAAA,uBAG7ExD,EAAA6B,UAAAkC,SAAA,WACA,IAAAzB,EACAkB,EAAmBhD,OAAAN,EAAA,KAAAM,CAAUD,MAC7B,OACAkD,OAAAnB,EAAA,GACAA,EAAAkB,IAAA,EAEAlB,EAAA,2BAAAkB,IAAA,EACAlB,KAGAtC,EAAA6B,UAAAmC,iBAAA,WACA,OAAgBxD,OAAAN,EAAA,KAAhB,CAAiB,OAASuD,MAAA,oBAA4BlD,KAAAuD,gBAA0BtD,OAAAN,EAAA,KAA1B,CAA2B,OAASuD,MAAA,4BAAsCjD,OAAAN,EAAA,KAAAM,CAAC,eAAiByD,KAAA1D,KAAAuD,kBAA4BvD,KAAA2D,aAA0B1D,OAAAN,EAAA,KAA1B,CAA2B,OAASuD,MAAA,wBAAAU,UAA4C3D,OAAAJ,EAAA,KAAAI,CAAiBD,KAAA2D,iBAE/QlE,EAAA6B,UAAA0B,OAAA,WAA0D,OAAQ/C,OAAAN,EAAA,KAAAM,CAAEN,EAAA,KAAIK,KAAAwD,WAAAxD,KAAAyD,qBACxExD,OAAAkD,eAAA1D,EAAA,SACA2D,IAAA,WAA0B,26CAC1BC,YAAA,EACAC,cAAA,IAEA7D,EA9BA,wCC5OAL,EAAAG,EAAAD,EAAA,sBAAAuE,IAIA,IAAAA,EAAA,SAAAC,GACA,IACA,qBAAAA,GAAA,KAAAA,EACA,OAAAA,EAOA,IAAAC,EAAAC,SAAAC,yBACAC,EAAAF,SAAAG,cAAA,OACAJ,EAAAK,YAAAF,GACAA,EAAAN,UAAAE,EAKAO,EAAAC,QAAA,SAAAC,GAEA,IADA,IAAAC,EAAAT,EAAAU,iBAAAF,GACAG,EAAAF,EAAAG,OAAA,EAAmED,GAAA,EAAmBA,IAAA,CACtF,IAAAE,EAAAJ,EAAAE,GACAE,EAAAC,WACAD,EAAAC,WAAAC,YAAAF,GAGAb,EAAAe,YAAAF,GASA,IAFA,IAAAG,EAAAC,EAAAJ,GAEAK,EAAA,EAAwCA,EAAAF,EAAAJ,OAAmCM,IAC3EC,EAAAH,EAAAE,OAWA,IAFA,IAAAE,EAAAH,EAAAjB,GAEAkB,EAAA,EAAgCA,EAAAE,EAAAR,OAA8CM,IAC9EC,EAAAC,EAAAF,IAGA,IAAAG,EAAApB,SAAAG,cAAA,OACAiB,EAAAhB,YAAAL,GAEA,IAAAsB,EAAAD,EAAAE,cAAA,OACA,cAAAD,IAAAzB,UAAAwB,EAAAxB,UAEA,MAAA2B,GAEA,OADAC,QAAAC,MAAAF,GACA,KAQAL,EAAA,SAAAN,GAEA,IAAAA,EAAAc,UAAA,IAAAd,EAAAc,SAAA,CAGA,QAAAC,EAAAf,EAAAgB,WAAAjB,OAAA,EAA+CgB,GAAA,EAAQA,IAAA,CACvD,IAAAE,EAAAjB,EAAAgB,WAAAD,GACAG,EAAAD,EAAAnC,KAEA,GAAAqC,EAAAC,SAAAF,EAAAG,eAAA,CAMA,IAAAC,EAAAL,EAAAM,MAEA,MAAAD,KAAAD,cAAAD,SAAA,gBACApB,EAAAwB,gBAAAN,QARAlB,EAAAwB,gBAAAN,GAcA,IAAAf,EAAAC,EAAAJ,GAEA,IAAAe,EAAA,EAAmBA,EAAAZ,EAAAJ,OAA0BgB,IAC7CT,EAAAH,EAAAY,MAOAX,EAAA,SAAAJ,GACA,aAAAA,EAAAyB,SAAAzB,EAAAyB,SAAAzB,EAAA0B,YAEAP,EAAA,0CACA1B,EAAA","file":"js/chunk-bd911bc2.6f05136b.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { r as registerInstance, d as createEvent, w as writeTask, f as readTask, c as getIonMode, h, e as getElement, H as Host } from './chunk-09ec7fc0.js';\nimport { b as config } from './chunk-1074393c.js';\nimport { s as sanitizeDOMString } from './chunk-cae2ca23.js';\nvar InfiniteScroll = /** @class */ (function () {\n    function InfiniteScroll(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = function () {\n            var scrollEl = _this.scrollEl;\n            if (!scrollEl || !_this.canStart()) {\n                return 1;\n            }\n            var infiniteHeight = _this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            var scrollTop = scrollEl.scrollTop;\n            var scrollHeight = scrollEl.scrollHeight;\n            var height = scrollEl.offsetHeight;\n            var threshold = _this.thrPc !== 0 ? (height * _this.thrPc) : _this.thrPx;\n            var distanceFromInfinite = (_this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!_this.didFire) {\n                    _this.isLoading = true;\n                    _this.didFire = true;\n                    _this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                _this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    }\n    InfiniteScroll.prototype.thresholdChanged = function () {\n        var val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    };\n    InfiniteScroll.prototype.disabledChanged = function () {\n        var disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    };\n    InfiniteScroll.prototype.componentDidLoad = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var contentEl, _a;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) return [3 /*break*/, 3];\n                        return [4 /*yield*/, contentEl.componentOnReady()];\n                    case 1:\n                        _b.sent();\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 2:\n                        _a.scrollEl = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        this.thresholdChanged();\n                        this.disabledChanged();\n                        if (this.position === 'top') {\n                            writeTask(function () {\n                                if (_this.scrollEl) {\n                                    _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\n                                }\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    InfiniteScroll.prototype.componentDidUnload = function () {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    };\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    InfiniteScroll.prototype.complete = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var scrollEl, prev_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                scrollEl = this.scrollEl;\n                if (!this.isLoading || !scrollEl) {\n                    return [2 /*return*/];\n                }\n                this.isLoading = false;\n                if (this.position === 'top') {\n                    /**\n                     * New content is being added at the top, but the scrollTop position stays the same,\n                     * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n                     * (Frame 1)\n                     *    - complete() is called, but the UI hasn't had time to update yet.\n                     *    - Save the current content dimensions.\n                     *    - Wait for the next frame using _dom.read, so the UI will be updated.\n                     * (Frame 2)\n                     *    - Read the new content dimensions.\n                     *    - Calculate the height difference and the new scroll position.\n                     *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n                     * (Still frame 2, if I'm correct)\n                     *    - Change the scroll position (= visually maintain the scroll position).\n                     *    - Change the state to re-enable the InfiniteScroll.\n                     *    - This should be after changing the scroll position, or it could\n                     *    cause the InfiniteScroll to be triggered again immediately.\n                     * (Frame 3)\n                     *    Done.\n                     */\n                    this.isBusy = true;\n                    prev_1 = scrollEl.scrollHeight - scrollEl.scrollTop;\n                    // ******** DOM READ ****************\n                    requestAnimationFrame(function () {\n                        readTask(function () {\n                            // UI has updated, save the new content dimensions\n                            var scrollHeight = scrollEl.scrollHeight;\n                            // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                            var newScrollTop = scrollHeight - prev_1;\n                            // ******** DOM WRITE ****************\n                            requestAnimationFrame(function () {\n                                writeTask(function () {\n                                    scrollEl.scrollTop = newScrollTop;\n                                    _this.isBusy = false;\n                                });\n                            });\n                        });\n                    });\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    InfiniteScroll.prototype.canStart = function () {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    };\n    InfiniteScroll.prototype.enableScrollEvents = function (shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    };\n    InfiniteScroll.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        var disabled = this.disabled;\n        return (h(Host, { class: (_a = {},\n                _a[mode] = true,\n                _a['infinite-scroll-loading'] = this.isLoading,\n                _a['infinite-scroll-enabled'] = !disabled,\n                _a) }));\n    };\n    Object.defineProperty(InfiniteScroll.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InfiniteScroll, \"watchers\", {\n        get: function () {\n            return {\n                \"threshold\": [\"thresholdChanged\"],\n                \"disabled\": [\"disabledChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(InfiniteScroll, \"style\", {\n        get: function () { return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return InfiniteScroll;\n}());\nvar InfiniteScrollContent = /** @class */ (function () {\n    function InfiniteScrollContent(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    InfiniteScrollContent.prototype.componentDidLoad = function () {\n        if (this.loadingSpinner === undefined) {\n            var mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    };\n    InfiniteScrollContent.prototype.hostData = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return {\n            class: (_a = {},\n                _a[mode] = true,\n                // Used internally for styling\n                _a[\"infinite-scroll-content-\" + mode] = true,\n                _a)\n        };\n    };\n    InfiniteScrollContent.prototype.__stencil_render = function () {\n        return (h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) }))));\n    };\n    InfiniteScrollContent.prototype.render = function () { return h(Host, this.hostData(), this.__stencil_render()); };\n    Object.defineProperty(InfiniteScrollContent, \"style\", {\n        get: function () { return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return InfiniteScrollContent;\n}());\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n","/**\n * Does a simple sanitization of all elements\n * in an untrusted string\n */\nvar sanitizeDOMString = function (untrustedString) {\n    try {\n        if (typeof untrustedString !== 'string' || untrustedString === '') {\n            return untrustedString;\n        }\n        /**\n         * Create a document fragment\n         * separate from the main DOM,\n         * create a div to do our work in\n         */\n        var documentFragment_1 = document.createDocumentFragment();\n        var workingDiv = document.createElement('div');\n        documentFragment_1.appendChild(workingDiv);\n        workingDiv.innerHTML = untrustedString;\n        /**\n         * Remove any elements\n         * that are blocked\n         */\n        blockedTags.forEach(function (blockedTag) {\n            var getElementsToRemove = documentFragment_1.querySelectorAll(blockedTag);\n            for (var elementIndex = getElementsToRemove.length - 1; elementIndex >= 0; elementIndex--) {\n                var element = getElementsToRemove[elementIndex];\n                if (element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n                else {\n                    documentFragment_1.removeChild(element);\n                }\n                /**\n                 * We still need to sanitize\n                 * the children of this element\n                 * as they are left behind\n                 */\n                var childElements = getElementChildren(element);\n                /* tslint:disable-next-line */\n                for (var childIndex = 0; childIndex < childElements.length; childIndex++) {\n                    sanitizeElement(childElements[childIndex]);\n                }\n            }\n        });\n        /**\n         * Go through remaining elements and remove\n         * non-allowed attribs\n         */\n        // IE does not support .children on document fragments, only .childNodes\n        var documentFragmentChildren = getElementChildren(documentFragment_1);\n        /* tslint:disable-next-line */\n        for (var childIndex = 0; childIndex < documentFragmentChildren.length; childIndex++) {\n            sanitizeElement(documentFragmentChildren[childIndex]);\n        }\n        // Append document fragment to div\n        var fragmentDiv = document.createElement('div');\n        fragmentDiv.appendChild(documentFragment_1);\n        // First child is always the div we did our work in\n        var getInnerDiv = fragmentDiv.querySelector('div');\n        return (getInnerDiv !== null) ? getInnerDiv.innerHTML : fragmentDiv.innerHTML;\n    }\n    catch (err) {\n        console.error(err);\n        return '';\n    }\n};\n/**\n * Clean up current element based on allowed attributes\n * and then recursively dig down into any child elements to\n * clean those up as well\n */\nvar sanitizeElement = function (element) {\n    // IE uses childNodes, so ignore nodes that are not elements\n    if (element.nodeType && element.nodeType !== 1) {\n        return;\n    }\n    for (var i = element.attributes.length - 1; i >= 0; i--) {\n        var attribute = element.attributes[i];\n        var attributeName = attribute.name;\n        // remove non-allowed attribs\n        if (!allowedAttributes.includes(attributeName.toLowerCase())) {\n            element.removeAttribute(attributeName);\n            continue;\n        }\n        // clean up any allowed attribs\n        // that attempt to do any JS funny-business\n        var attributeValue = attribute.value;\n        /* tslint:disable-next-line */\n        if (attributeValue != null && attributeValue.toLowerCase().includes('javascript:')) {\n            element.removeAttribute(attributeName);\n        }\n    }\n    /**\n     * Sanitize any nested children\n     */\n    var childElements = getElementChildren(element);\n    /* tslint:disable-next-line */\n    for (var i = 0; i < childElements.length; i++) {\n        sanitizeElement(childElements[i]);\n    }\n};\n/**\n * IE doesn't always support .children\n * so we revert to .childNodes instead\n */\nvar getElementChildren = function (element) {\n    return (element.children != null) ? element.children : element.childNodes;\n};\nvar allowedAttributes = ['class', 'id', 'href', 'src', 'name', 'slot'];\nvar blockedTags = ['script', 'style', 'iframe', 'meta', 'link', 'object', 'embed'];\nexport { sanitizeDOMString as s };\n"],"sourceRoot":""}