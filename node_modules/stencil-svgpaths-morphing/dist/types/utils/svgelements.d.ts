import { Point } from './geom';
import { CubicBezier, /*BoundingBox,*/ CubicBezierSplitCurves } from './interfaces';
export declare function createSVGElement(element: string, parent: HTMLElement | SVGElement): SVGElement;
export declare function isALetter(charVal: any): boolean;
export declare function maxSegmentPath(cBPaths: Array<CubicBezier>): any;
export declare function isRegularShape(shape: CubicBezier): boolean;
export declare function splitCubicBezier(cB: Array<Point>, z: number): CubicBezierSplitCurves;
export declare function getCubicBezierFromPoints(points: Array<Point>): string;
export declare function initCurvePoints(P1: Point, P2: Point, P3: Point, P4: Point): Array<Point>;
export declare function getPointsFromCBPath(cB: CubicBezier): Array<Point>;
export declare function permuteCubicBezier(points: Array<Point>, startIndex: number): string;
export declare function permutePoints(points: Array<Point>, index: number): Array<any>;
export declare function cubicBezierAverageLength(P1: Point, P2: Point, P3: Point, P4: Point): number;
export declare function alignSegmentPath(cB: CubicBezier, ratio: number): {
    points: Array<Point>;
    segLength: Array<number>;
};
export declare function addSegmentToPath(points: Array<Point>, segLength: Array<number>, nSegment: number): {
    points: Array<Point>;
    segLength: Array<number>;
};
export declare function alignPathSegmentWithMax(cB: CubicBezier, nSegment: number): Promise<CubicBezier>;
export declare function alignPathSegments(cBPaths: Array<CubicBezier>, nSegment?: number): Promise<Array<CubicBezier>>;
export declare function cubicBezierfromPath(path: string, startIndex?: number): Promise<CubicBezier>;
export declare function lineToCubicBezier(cBezier: CubicBezier, oPath: Array<string>, letter: boolean): Promise<CubicBezier>;
export declare function quadraticToCubicBezier(cBezier: CubicBezier, oPath: Array<string>, letter: boolean): Promise<CubicBezier>;
export declare function cubicToCubicBezier(cBezier: CubicBezier, oPath: Array<string>, letter: boolean): Promise<CubicBezier>;
